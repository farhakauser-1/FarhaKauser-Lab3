{"ast":null,"code":"// import React, { Component } from 'react'\n// import { graphql, compose } from 'react-apollo'\n// import {\n//   getAuthorsQuery,\n//   getBooksQuery,\n//   getBuyersQuery\n// } from '../queries/queries'\n// import { addBookMutation } from '../mutation/mutations'\n// class AddBook extends Component {\n//   constructor (props) {\n//     super(props)\n//     this.state = {\n//       name: '',\n//       genre: '',\n//       authorId: ''\n//     }\n//   }\n//   displayAuthors () {\n//     var data = this.props.getAuthorsQuery\n//     // var data1 = this.props.getBuyersQuery\n//     // console.log('Buyers' + JSON.stringify(data1.buyers))\n//     if (data.loading) {\n//       return <option disabled>Loading authors</option>\n//     } else {\n//       return data.authors.map(author => (\n//         <option key={author.id} value={author.id}>\n//           {author.name}\n//         </option>\n//       ))\n//     }\n//   }\n//   submitForm (e) {\n//     e.preventDefault()\n//     console.log(this.state)\n//     this.props.addBookMutation({\n//       variables: {\n//         name: this.state.name,\n//         genre: this.state.genre,\n//         authorId: this.state.authorId\n//       },\n//       refetchQueries: [{ query: getBooksQuery }]\n//     })\n//   }\n//   render () {\n//     return (\n//       <form id='add-book' onSubmit={this.submitForm.bind(this)}>\n//         <div className='field'>\n//           <label>Book name:</label>\n//           <input\n//             type='text'\n//             onChange={e => this.setState({ name: e.target.value })}\n//           />\n//         </div>\n//         <div className='field'>\n//           <label>Genre:</label>\n//           <input\n//             type='text'\n//             onChange={e => this.setState({ genre: e.target.value })}\n//           />\n//         </div>\n//         <div className='field'>\n//           <label>Author:</label>\n//           <select onChange={e => this.setState({ authorId: e.target.value })}>\n//             <option>Select author</option>\n//             {this.displayAuthors()}\n//           </select>\n//         </div>\n//         <button>Submit</button>\n//       </form>\n//     )\n//   }\n// }\n// export default compose(\n//   graphql(getAuthorsQuery, { name: 'getAuthorsQuery' }),\n//   graphql(getBuyersQuery, { name: 'getBooksQuery' }),\n//   graphql(addBookMutation, { name: 'addBookMutation' })\n// )(AddBook)","map":{"version":3,"sources":["/Users/farha/Downloads/GraphQL/GraphQL/frontend/src/components/AddBook.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { Component } from 'react'\n// import { graphql, compose } from 'react-apollo'\n// import {\n//   getAuthorsQuery,\n//   getBooksQuery,\n//   getBuyersQuery\n// } from '../queries/queries'\n// import { addBookMutation } from '../mutation/mutations'\n\n// class AddBook extends Component {\n//   constructor (props) {\n//     super(props)\n//     this.state = {\n//       name: '',\n//       genre: '',\n//       authorId: ''\n//     }\n//   }\n//   displayAuthors () {\n//     var data = this.props.getAuthorsQuery\n//     // var data1 = this.props.getBuyersQuery\n\n//     // console.log('Buyers' + JSON.stringify(data1.buyers))\n//     if (data.loading) {\n//       return <option disabled>Loading authors</option>\n//     } else {\n//       return data.authors.map(author => (\n//         <option key={author.id} value={author.id}>\n//           {author.name}\n//         </option>\n//       ))\n//     }\n//   }\n//   submitForm (e) {\n//     e.preventDefault()\n//     console.log(this.state)\n//     this.props.addBookMutation({\n//       variables: {\n//         name: this.state.name,\n//         genre: this.state.genre,\n//         authorId: this.state.authorId\n//       },\n//       refetchQueries: [{ query: getBooksQuery }]\n//     })\n//   }\n//   render () {\n//     return (\n//       <form id='add-book' onSubmit={this.submitForm.bind(this)}>\n//         <div className='field'>\n//           <label>Book name:</label>\n//           <input\n//             type='text'\n//             onChange={e => this.setState({ name: e.target.value })}\n//           />\n//         </div>\n//         <div className='field'>\n//           <label>Genre:</label>\n//           <input\n//             type='text'\n//             onChange={e => this.setState({ genre: e.target.value })}\n//           />\n//         </div>\n//         <div className='field'>\n//           <label>Author:</label>\n//           <select onChange={e => this.setState({ authorId: e.target.value })}>\n//             <option>Select author</option>\n//             {this.displayAuthors()}\n//           </select>\n//         </div>\n//         <button>Submit</button>\n//       </form>\n//     )\n//   }\n// }\n\n// export default compose(\n//   graphql(getAuthorsQuery, { name: 'getAuthorsQuery' }),\n//   graphql(getBuyersQuery, { name: 'getBooksQuery' }),\n//   graphql(addBookMutation, { name: 'addBookMutation' })\n// )(AddBook)\n"]},"metadata":{},"sourceType":"module"}